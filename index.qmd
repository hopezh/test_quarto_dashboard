---
title: "test quarto dashboard"
author: "oatcracker"
format: dashboard
---


```{python}
import polars as pl
import plotly.express as px
import plotly.graph_objects as go
```

```{python}
# create df for solar farms
data_solar_farms = {
    "name"          : ["Setouchi Kirei", "Eurus Rokkasho", "Tomatoh Abira", "Oita"],
    "capacity_mw"   : [235, 148, 111, 82],
    "latitude"      : [34.6, 40.9, 42.7, 33.2],
    "longitude"     : [134.1, 141.3, 141.7, 131.7],
    "state"         : ["Okayama", "Aomori", "Hokkaido", "Oita"],
    "city"          : ["Setouchi", "Rokkasho", "Abira", "Oita-shi"],
    "year_operation": [2018, 2015, 2015, 2013],
}
df_solar_farms = pl.DataFrame(data_solar_farms)
```

```{python}
# create df for typhoon paths
data_typhoon = {
    'name': [
        'Typhoon A',
        'Typhoon A',
        'Typhoon A',
        'Typhoon B',
        'Typhoon B',
        'Typhoon B',
        'Typhoon C',
        'Typhoon C',
        'Typhoon C',
        'Typhoon C',
    ],
    'idx': [
        230701,
        230702,
        230703,
        220301,
        220302,
        220303,
        210501,
        210502,
        210503,
        210504,
    ],
    'latitude': [
        31.1,
        36.6,
        41.0,
        31.8,
        36.6,
        37.8,
        31.9,
        33.3,
        38.9,
        41.4,
    ],
    'longitude': [
        137.3,
        133.0,
        135.8,
        128.4,
        135.0,
        142.2,
        132.5,
        136.9,
        138.8,
        144.6,
    ],
    'date_time': [
        '2022-08-07 00:00:00',
        '2022-08-07 06:00:00',
        '2022-08-07 12:00:00',
        '2023-06-06 18:00:00',
        '2023-06-07 00:00:00',
        '2023-06-07 06:00:00',
        '2021-03-01 06:00:00',
        '2021-03-01 12:00:00',
        '2021-03-01 18:00:00',
        '2021-03-01 23:00:00',
    ],
    'grade': [1, 3, 2, 4, 6, 5, 1, 3, 7, 5]
}
df_typhoon = pl.DataFrame(data_typhoon)
```

# Page 1

## Row 1

### Column r1-c1

```{python}
#| title: map of typhoon paths
fig_typhoon = px.line_mapbox(
    df_typhoon,
    lat='latitude',
    lon='longitude',
    color='name',
    animation_frame='name',
)

fig_typhoon.update_layout(
    mapbox_style="carto-darkmatter",
    mapbox_center_lat=36,
    mapbox_center_lon=138,
    mapbox_zoom=3,
)
```

```{python}
# #| title: map of typhoon paths
# fig_typhoon = go.Figure(
#     go.Scattermapbox(
#         lat = df_typhoon['latitude'],
#         lon = df_typhoon['longitude'],
#         mode = 'lines+markers',
#         # marker = go.scattermapbox.Marker(
#         #     size=df_solar_farms['capacity_mw']/10
#         # ),
#     )
# )

# fig_typhoon.update_layout(
#     mapbox_style="carto-darkmatter",
#     mapbox=dict(
#         center=go.layout.mapbox.Center(
#             lat=36,
#             lon=138
#         ),
#         zoom=3
#     ),
# )
```


### Column r1-c2

```{python}
#| title: map of solar farms
fig_solar_farms = go.Figure(
    go.Scattermapbox(
        lat = df_solar_farms['latitude'],
        lon = df_solar_farms['longitude'],
        mode = 'markers',
        marker = go.scattermapbox.Marker(
            size=df_solar_farms['capacity_mw']/10
        ),
    )
)

fig_solar_farms.update_layout(
    mapbox_style="carto-darkmatter",
    mapbox=dict(
        center=go.layout.mapbox.Center(
            lat=36,
            lon=138
        ),
        zoom=3
    ),
)
```


## Row 2

```{python}
#| title: merge two plot
fig_merged = fig_typhoon.add_trace(
    go.Scattermapbox(
        lat = df_solar_farms['latitude'],
        lon = df_solar_farms['longitude'],
        mode = 'markers',
        marker = go.scattermapbox.Marker(
            size=df_solar_farms['capacity_mw']/10
        ),
    )

)

fig_merged.update_layout(
    mapbox_style="carto-darkmatter",
    mapbox_center_lat=36,
    mapbox_center_lon=138,
    mapbox_zoom=3,
)
```


